ALLargs <- function() {
cmdArgs <- commandArgs(trailingOnly = FALSE)
scrPATHkw <- "--file="
match <- grep(scrPATHkw, cmdArgs)
if (length(match) > 0) {
# Rscript
scriptLOC <- dirname(normalizePath(sub(scrPATHkw, "", cmdArgs[match])))
} else {
# 'source'd via R console
scriptLOC <- normalizePath(sys.frames()[[1]]$ofile)
}
cmdArgs <- commandArgs(trailingOnly =TRUE)
return(list(scriptLOC,cmdArgs))
}
allArgs <- ALLargs()
print(allArgs)
# Printing #
cat(" MPLNClust v2.0 (2019)",'\n')
cat("----------------------------",'\n')
# Load utilities file with fns. defns.
utilitiesFile <- paste(allArgs[[1]],"/utils_RACS-IGR.R",sep='')
print(utilitiesFile)
#print(dirname(sys.frame(1)$ofile)
#sourceDir <- getSrcDirectory(function(dummy) {dummy})
#print(sourceDir)
if (file.exists(utilitiesFile)) {
source(utilitiesFile)
} else {
stop("Critical ERRROR: '",utilitiesFile,"' NOT found!")
}
ALLargs <- function() {
cmdArgs <- commandArgs(trailingOnly = FALSE)
scrPATHkw <- "--file="
match <- grep(scrPATHkw, cmdArgs)
if (length(match) > 0) {
# Rscript
scriptLOC <- dirname(normalizePath(sub(scrPATHkw, "", cmdArgs[match])))
} else {
# 'source'd via R console
scriptLOC <- normalizePath(sys.frames()[[1]]$ofile)
}
cmdArgs <- commandArgs(trailingOnly =TRUE)
return(list(scriptLOC,cmdArgs))
}
allArgs <- ALLargs()
print(allArgs)
# Printing #
cat(" MPLNClust v2.0 (2019)",'\n')
cat("----------------------------",'\n')
# Load utilities file with fns. defns.
utilitiesFile <- paste(allArgs[[1]],"/Utilities_File.txt",sep='')
print(utilitiesFile)
#print(dirname(sys.frame(1)$ofile)
#sourceDir <- getSrcDirectory(function(dummy) {dummy})
#print(sourceDir)
if (file.exists(utilitiesFile)) {
source(utilitiesFile)
} else {
stop("Critical ERRROR: '",utilitiesFile,"' NOT found!")
}
ALLargs <- function() {
cmdArgs <- commandArgs(trailingOnly = FALSE)
scrPATHkw <- "--file="
match <- grep(scrPATHkw, cmdArgs)
if (length(match) > 0) {
# Rscript
scriptLOC <- dirname(normalizePath(sub(scrPATHkw, "", cmdArgs[match])))
} else {
# 'source'd via R console
scriptLOC <- normalizePath(sys.frames()[[1]]$ofile)
}
cmdArgs <- commandArgs(trailingOnly =TRUE)
return(list(scriptLOC,cmdArgs))
}
allArgs <- ALLargs()
cmdArgs <- commandArgs(trailingOnly = FALSE)
scrPATHkw <- "--file="
match <- grep(scrPATHkw, cmdArgs)
if (length(match) > 0) {
# Rscript
scriptLOC <- dirname(normalizePath(sub(scrPATHkw, "", cmdArgs[match])))
} else {
# 'source'd via R console
scriptLOC <- normalizePath(sys.frames()[[1]]$ofile)
}
cmdArgs
scrPATHkw
utilitiesFile <- paste(allArgs[[1]],"/Utilities_File.txt",sep='')
setwd("/Volumes/GoogleDrive/My Drive/UGuelph/Analysis_Anjali'sLaptop/All algorithms (Monte Carlo EM)/MPLN_matrix_variate/Git/GitHub/R")
source("Package_check.R")
source("Calc_likelihood.R")
source("Calculate_parameters.R")
source("Calling_clustering.R")
source("Cluster_mpln.R")
source("Initialization_run.R")
source("Main_mpln.R")
source("Model_selection.R")
source("MPLNdata_generator.R")
source("Remove_Zero_Counts.R")
source("Stan_run.R")
source("Visualize_mpln.R")
source("Zvalue_calculation.R")
source("Calc_likelihood.R")
setwd("/Volumes/GoogleDrive/My Drive/UGuelph/Analysis_Anjali'sLaptop/All algorithms (Monte Carlo EM)/MPLN_matrix_variate/Git/GitHub/R")
source("Package_check.R")
source("Calc_likelihood.R")
source("Calc_loglikelihood")
source("Calc_loglikelihood")
