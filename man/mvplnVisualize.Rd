% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mvplnCode.R
\name{mvplnVisualize}
\alias{mvplnVisualize}
\title{Visualize Clustered Results Via MVPLN}
\usage{
mvplnVisualize(
  dataset,
  plots = "bar",
  probabilities = NA,
  clusterMembershipVector = NA,
  fileName = paste0("Plot_", date()),
  printPlot = TRUE,
  format = "pdf"
)
}
\arguments{
\item{dataset}{A dataset of class matrix and type integer such that
rows correspond to observations and columns correspond to variables.}

\item{plots}{A character string indicating which plots to be produced.
Options are 'bar' only for now.}

\item{probabilities}{A matrix of size N x C, such that rows correspond
to N observations and columns correspond to C clusters. Each row
should sum to 1. Default is NA.}

\item{clusterMembershipVector}{A numeric vector of length nrow(dataset)
containing the cluster membership of each observation as generated by
mpln(). Default is NA.}

\item{fileName}{Unique character string indicating the name for the plot
being generated. Default is Plot_date, where date is obtained from
date().}

\item{printPlot}{Logical indicating if plot(s) should be saved in local
directory. Default TRUE. Options TRUE or FALSE.}

\item{format}{Character string indicating the format of the image to
be produced. Default 'pdf'. Options 'pdf' or 'png'.}
}
\value{
Plotting function provides the possibility for a bar plot.
}
\description{
A function to visualize data and clustering results obtained
from a mixtures of matrix variate Poisson-log normal (MVPLN) model.
Provided a matrix of probabilities for the observations belonging
to each cluster, a barplot of probabilities is produced.
}
\examples{
\dontrun{
set.seed(1234) # for reproducibility, setting seed
trueG <- 2 # number of total components/clusters
truer <- 2 # number of total occasions
truep <- 3 # number of total responses
truen <- 100 # number of total units

# Mu is a r x p matrix
trueM1 <- matrix(rep(6, (truer * truep)),
                 ncol = truep,
                 nrow = truer, byrow = TRUE)

trueM2 <- matrix(rep(1, (truer * truep)),
                 ncol = truep,
                 nrow = truer,
                 byrow = TRUE)

trueMall <- rbind(trueM1, trueM2)

# Phi is a r x r matrix
# Loading needed packages for generating data
if (!require(clusterGeneration)) install.packages("clusterGeneration")
# Covariance matrix containing variances and covariances between r occasions
truePhi1 <- clusterGeneration::genPositiveDefMat("unifcorrmat",
                                                 dim = truer,
                                                 rangeVar = c(1, 1.7))$Sigma
truePhi1[1, 1] <- 1 # For identifiability issues

truePhi2 <- clusterGeneration::genPositiveDefMat("unifcorrmat",
                                                 dim = truer,
                                                 rangeVar = c(0.7, 0.7))$Sigma
truePhi2[1, 1] <- 1 # For identifiability issues
truePhiAll <- rbind(truePhi1, truePhi2)

# Omega is a p x p matrix
# Covariance matrix containing variances and covariances between p responses
trueOmega1 <- clusterGeneration::genPositiveDefMat("unifcorrmat", dim = truep,
                                                   rangeVar = c(1, 1.7))$Sigma

trueOmega2 <- clusterGeneration::genPositiveDefMat("unifcorrmat", dim = truep,
                                                   rangeVar = c(0.7, 0.7))$Sigma

trueOmegaAll <- rbind(trueOmega1, trueOmega2)

# Simulating data
simulatedMVData <- mixMVPLN::mvplnDataGenerator(nOccasions = truer,
                                                nResponses = truep,
                                                nUnits = truen,
                                                mixingProportions = c(0.55, 0.45),
                                                matrixMean = trueMall,
                                                phi = truePhiAll,
                                                omega = trueOmegaAll)

# Clustering
clusteringResults <- mixMVPLN::mvplnClustering(
                         dataset = simulatedMVData$dataset,
                         membership = simulatedMVData$truemembership,
                         gmin = 1,
                         gmax = 2,
                         nChains = 3,
                         nIterations = 400,
                         initMethod = "kmeans",
                         nInitIterations = 0,
                         normalize = "Yes")

# Visualize
mvplnClustVisuals <- mixMVPLN::mvplnVisualize(
  dataset = simulatedMVData$dataset,
  plots = 'bar',
  probabilities = clusteringResults$allResults[[2]]$allresults$probaPost,
  clusterMembershipVector = clusteringResults$allResults[[2]]$allresults$clusterlabels,
  fileName = paste0('Plot_',date()),
  printPlot = TRUE,
  format = 'png')
}

}
\author{
Anjali Silva, \email{anjali.silva@uhnresearch.ca}
}
